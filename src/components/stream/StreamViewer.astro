---
export interface Props {
  constraints?: MediaStreamConstraints;
  stream?: MediaStream;
}
---

<div class="video-mask">
  <video
    hidden
    id="localVideo"
    class="container-fluid"
    width="${window}.width"
    playsinline
    disablepictureinpicture
    autoplay
    muted
    controls="false"
  >
  </video>
</div>
<button id="ask-stream-perms" class="btn btn-primary" type="button"
  >Ask for permissions</button
>

<script>
  const btn = document.querySelector("button#ask-stream-perms");
  const vid = document.querySelector("video");

  async function playVideo(elem: HTMLSelectElement) {
    const constraints = {
      // audio: { echoCancellation: true },
      video: {
        deviceId: elem.value,
        // width: { min: minWidth },
        // height: { min: minHeight },
      },
    };

    try {
      const stream = await navigator.mediaDevices.getUserMedia(constraints);

      const videoElement = document.querySelector(
        "video#localVideo"
      ) as HTMLVideoElement | null;

      if (videoElement != null) {
        if (videoElement.srcObject == null) {
          videoElement.srcObject = stream;
        } else {
          videoElement.srcObject = null;
          videoElement.srcObject = stream;
        }
      }
    } catch (error) {
      console.error("Error opening video camera.", error);
    }
  }

  const selectElement = document.querySelector(
    "select#availableCameras"
  ) as HTMLSelectElement | null;

  if (selectElement == null) {
    console.error("No video element found.");
  } else {
    await playVideo(selectElement);
    selectElement.addEventListener("change", (event) => {
      playVideo(selectElement).then();
    });
  }
</script>
<style>
  .video-mask {
    width: 350px;
    border-radius: 10px;
    overflow: hidden;
  }
</style>
